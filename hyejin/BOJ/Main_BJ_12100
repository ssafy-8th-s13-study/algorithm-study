package study;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main_12100 {
    static int N, max = 0;
    static int[][] map, temp;
    static int[] direct;
    static boolean[][] visit;

    static int[] dx = {-1, 0, 1, 0};
    static int[] dy = {0, 1, 0, -1};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        N = Integer.parseInt(br.readLine());

        map = new int[N+1][N+1];
        direct = new int[5];
        StringTokenizer st;

        for(int i=1; i<=N; i++) {
            st = new StringTokenizer(br.readLine());
            for(int j=1; j<=N; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        dfs(5,0);
        System.out.println(max);
    }

    private static void dfs(int end, int idx) {
        if(index == end) {
            maxCheck();
        } else {
            for(int i=0; i<4; i++) {
                direct[idx] = i;
                dfs(end, idx+1);
            }
        }
    }

    private static void maxCheck() {
        temp = new int[N+1][N+1];

        for (int i=1; i<=N; i++) {
            temp[i] = map[i].clone();
        }

        for (int d=0; d<direct.length; d++) {
            visit = new boolean[N+1][N+1];

            if (direct[d] == 0) { //상
                for (int i=1; i<=N; i++) {
                    for (int j=1; j<=N; j++) {
                        move(i, j, direct[d]);
                    }
                }
            } else if (direct[d] == 2) { //하
                for (int i=N; i>=1; i--) {
                    for (int j=1; j<=N; j++) {
                        move(i, j, direct[d]);
                    }
                }
            } else if (direct[d] == 1) { //우
                for (int i=N; i>=1; i--) {
                    for (int j=1; j<=N; j++) {
                        move(j, i, direct[d]);
                    }
                }
            } else { //좌
                for (int i=1; i<=N; i++) {
                    for (int j=1; j<=N; j++) {
                        move(j, i, direct[d]);
                   }
               }
            }
        }

        for (int i=1; i<=N; i++) {
            for (int j=1; j<=N; j++) {
                if (temp[i][j] > max) {
                    max = temp[i][j];
                }
            }
        }
    }

    private static void move(int x, int y, int dir) {
        if (temp[x][y] == 0) {
            return;
        }

        while (true) {
            int nx = x + dx[dir];
            int ny = y + dy[dir];

            if (nx < 1 || ny < 1 || nx > n || ny > n) {
                return;
            }

            if (visit[nx][ny]) {
                return;
            }

            if (temp[nx][ny] == temp[x][y]) { // 합치기
                visit[nx][ny] = true;
                temp[nx][ny] *= 2;
                temp[x][y] = 0;
                return;
            } else if (temp[nx][ny] != 0) {
                return;
            }

            temp[nx][ny] = temp[x][y];
            temp[x][y] = 0;
            x = nx;
            y = ny;
        }
    }
}
